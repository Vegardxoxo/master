generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Semester {
  SPRING
  AUTUMN
}

enum ChartType {
  COMMIT_FREQUENCY
  COMMIT_SIZE
  CONTRIBUTIONS
  EXPORT
  PULL_REQUESTS
  COMMIT_CHANGED_FILES
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  password             String                @db.VarChar(255)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  repositories         Repository[]          @relation("RepositoryMembers")
  enrolledCourses      UserCourse[]
  dashboardPreferences DashboardPreference[]
}

model DashboardPreference {
  id           String    @id @default(uuid())
  userId       String
  preferences  Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
  @@index([userId])
}

model Course {
  id            String       @id @default(uuid())
  code          String       @unique
  name          String
  enrolledUsers UserCourse[]
}

model UserCourse {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())

  // References
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Course instances (years/semesters) created by this user for this course
  instances CourseInstance[]

  // Composite unique constraint to prevent duplicate enrollments
  @@unique([userId, courseId])
}

// Course instance represents a specific year/semester offering
model CourseInstance {
  id           String       @id @default(uuid())
  year         Int
  semester     Semester
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userCourseId String
  userCourse   UserCourse   @relation(fields: [userCourseId], references: [id], onDelete: Cascade)
  repositories Repository[]

  @@unique([userCourseId, year, semester])
}

model Repository {
  id               String            @id @default(uuid())
  githubId         String
  username         String
  repoName         String
  url              String
  organization     String            @default("none")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  openIssues       String            @default("0")
  members          User[]            @relation("RepositoryMembers")
  courseInstanceId String
  courseInstance   CourseInstance?   @relation(fields: [courseInstanceId], references: [id], onDelete: Cascade)
  coverageReport   CoverageReport[]
  fileSets         FileSet[]
  charts           RepositoryImage[]
  hasReport        Boolean           @default(false)
}

model CoverageReport {
  id            String         @id @default(uuid())
  repositoryId  String
  repository    Repository     @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  commit        String
  branch        String
  timestamp     DateTime       @default(now())
  statements    Float
  branches      Float
  functions     Float
  lines         Float
  overall       Float
  fileCoverages FileCoverage[]
}

model FileCoverage {
  id               String         @id @default(uuid())
  coverageReportId String
  coverageReport   CoverageReport @relation(fields: [coverageReportId], references: [id], onDelete: Cascade)
  filePath         String
  statements       Float
  branches         Float
  functions        Float
  lines            Float
}

model FileSet {
  id           String     @id @default(uuid())
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
  branch       String
  commit       String
  lastUpdated  DateTime   @default(now())
  files        File[]

  @@unique([repositoryId, branch]) // Ensure only one fileset per repository-branch combination
}

model File {
  id        String  @id @default(uuid())
  fileSet   FileSet @relation(fields: [fileSetId], references: [id], onDelete: Cascade)
  fileSetId String
  path      String
  extension String

  @@unique([fileSetId, path]) // Ensure file paths are unique within a file set
  @@index([fileSetId])
}

model RepositoryImage {
  id           String     @id @default(uuid())
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  imageUrl     String
  chartType    ChartType
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([repositoryId, chartType])
  @@index([repositoryId])
}
