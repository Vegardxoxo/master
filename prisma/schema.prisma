generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Semester {
  SPRING
  AUTUMN
}

enum ChartType {
  COMMIT_FREQUENCY
  COMMIT_SIZE
  CONTRIBUTIONS
  EXPORT
  PULL_REQUESTS
  COMMIT_CHANGED_FILES
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  password             String                @db.VarChar(255)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  repositories         Repository[]          @relation("RepositoryMembers")
  enrolledCourses      UserCourse[]
  dashboardPreferences DashboardPreference[]
}

model DashboardPreference {
  id          String   @id @default(uuid())
  userId      String
  preferences Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@index([userId])
}

model Course {
  id            String       @id @default(uuid())
  code          String       @unique
  name          String
  enrolledUsers UserCourse[]
}

model UserCourse {
  id        String           @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  instances CourseInstance[]

  @@unique([userId, courseId])
}

model CourseInstance {
  id           String       @id @default(uuid())
  year         Int
  semester     Semester
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userCourseId String
  userCourse   UserCourse   @relation(fields: [userCourseId], references: [id], onDelete: Cascade)
  repositories Repository[]

  @@unique([userCourseId, year, semester])
}

model Repository {
  id               String          @id @default(uuid())
  username         String
  createdAt        DateTime        @default(now())
  members          User[]          @relation("RepositoryMembers")
  courseInstanceId String
  courseInstance   CourseInstance? @relation(fields: [courseInstanceId], references: [id], onDelete: Cascade)

  // GitHub MetaData
  repoName   String
  githubId   String    @default("none")
  url        String    @default("none")
  updatedAt  DateTime?
  openIssues String    @default("0")
  stars      Int       @default(0)
  forks      Int       @default(0)
  watchers   Int       @default(0)

  // Github data
  workflowRuns      WorkflowRuns[]
  issues            Issue[]
  branches          Branch[]
  commitMain        CommitMain[]
  pullRequests      PullRequest[]
  commits           Commit[]
  milestones        Milestone[]
  languages         LanguageDistribution[]
  contributors      Contributor[]
  coverageReport    CoverageReport[]
  fileSets          FileSet[]
  charts            RepositoryImage[]
  hasReport         Boolean                @default(false)
  reportGeneratedAt DateTime?
}

model CoverageReport {
  id            String         @id @default(uuid())
  repositoryId  String
  repository    Repository     @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  commit        String
  branch        String
  timestamp     DateTime       @default(now())
  statements    Float
  branches      Float
  functions     Float
  lines         Float
  overall       Float
  fileCoverages FileCoverage[]
}

model FileCoverage {
  id               String         @id @default(uuid())
  coverageReportId String
  coverageReport   CoverageReport @relation(fields: [coverageReportId], references: [id], onDelete: Cascade)
  filePath         String
  statements       Float
  branches         Float
  functions        Float
  lines            Float
}

model FileSet {
  id           String     @id @default(uuid())
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
  branch       String
  commit       String
  lastUpdated  DateTime   @default(now())
  files        File[]

  @@unique([repositoryId, branch])
}

model File {
  id        String  @id @default(uuid())
  fileSet   FileSet @relation(fields: [fileSetId], references: [id], onDelete: Cascade)
  fileSetId String
  path      String
  extension String

  @@unique([fileSetId, path])
  @@index([fileSetId])
}

model RepositoryImage {
  id           String     @id @default(uuid())
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  imageUrl     String
  chartType    ChartType
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([repositoryId, chartType])
  @@index([repositoryId])
}

model Contributor {
  id           String     @id @default(uuid())
  login        String
  url          String
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([login, repositoryId])
  @@index([repositoryId])
}

model LanguageDistribution {
  id           String     @id @default(uuid())
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
  name         String
  value        Int
  percentage   Float

  @@unique([repositoryId, name])
  @@index([repositoryId])
}

model Milestone {
  id           String     @id @default(uuid())
  githubId     Int
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
  title        String
  description  String
  state        String
  closedIssues Int
  openIssues   Int
  totalIssues  Int
  dueDate      DateTime?
  createdAt    DateTime
  updatedAt    DateTime
  url          String

  @@unique([repositoryId, githubId])
  @@index([repositoryId])
}

model Commit {
  id           String     @id @default(uuid())
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
  sha          String     @unique
  authorName   String?
  authorEmail  String?
  committedAt  DateTime
  message      String?
  url          String?
  additions    Int
  deletions    Int
  changedFiles Int
  createdAt    DateTime   @default(now())
}

model CommitMain {
  id           String     @id @default(uuid())
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
  sha          String
  author       String
  date         DateTime   @default(now())
  url          String
  branch       String
  message      String

  @@unique([repositoryId, sha])
  @@index([repositoryId, date])
}

model PullRequest {
  id           String     @id @default(uuid())
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  state        String
  data         Json
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([repositoryId, state])
}

model Branch {
  id           String     @id @default(uuid())
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([repositoryId, name])
}

model Issue {
  id           String     @id @default(uuid())
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  title        String
  number       String
  url          String?
  createdAt    DateTime   @default(now())
  closedAt     DateTime?
  updatedAt    DateTime   @updatedAt

  @@unique([repositoryId, number])
}

model WorkflowRuns {
  id           String     @id @default(uuid())
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  githubRunId  BigInt
  name         String
  status       String
  conclusion   String
  createdAt    DateTime
  updatedAt    DateTime
  runStartedAt DateTime
  runNumber    Int

  @@unique([repositoryId, githubRunId])
}

generator erd {
  provider    = "prisma-erd-generator"
  tableOnly   = true
  ignoreEnums = true
  theme       = "forest"
}
