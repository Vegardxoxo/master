generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Semester {
  SPRING
  AUTUMN
}

enum UserType {
  EDUCATOR
  STUDENT
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  password     String       @db.VarChar(255)
  avatarUrl    String?
  githubUrl    String?
  userType     UserType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  repositories Repository[] @relation("RepositoryMembers")
  accessToken  String?

  // User's enrolled courses (many-to-many relationship)
  enrolledCourses UserCourse[]
}

// Pre-populated course catalog
model Course {
  id            String       @id @default(uuid())
  code          String       @unique // Course code like "TDMA5004"
  name          String
  enrolledUsers UserCourse[]
}

// Join table for users and courses with additional data
model UserCourse {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())

  // References
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Course instances (years/semesters) created by this user for this course
  instances CourseInstance[]

  // Composite unique constraint to prevent duplicate enrollments
  @@unique([userId, courseId])
}

// Course instance represents a specific year/semester offering
model CourseInstance {
  id        String   @id @default(uuid())
  year      Int
  semester  Semester
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship to UserCourse
  userCourseId String
  userCourse   UserCourse @relation(fields: [userCourseId], references: [id], onDelete: Cascade)

  // Repositories associated with this course instance
  repositories Repository[]

  // Prevent duplicate instances for the same user-course combination
  @@unique([userCourseId, year, semester])
}

model Repository {
  id               String           @id @default(uuid())
  githubId         String           @unique
  username         String
  repoName         String
  url              String
  platform         String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  members          User[]           @relation("RepositoryMembers")
  courseInstanceId String?
  courseInstance   CourseInstance?  @relation(fields: [courseInstanceId], references: [id])
  coverageReport   CoverageReport[]
  fileSets         FileSet[]
}

model CoverageReport {
  id            String         @id @default(uuid())
  repositoryId  String
  repository    Repository     @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  commit        String
  branch        String
  timestamp     DateTime       @default(now())
  statements    Float
  branches      Float
  functions     Float
  lines         Float
  overall       Float
  fileCoverages FileCoverage[]
}

model FileCoverage {
  id               String         @id @default(uuid())
  coverageReportId String
  coverageReport   CoverageReport @relation(fields: [coverageReportId], references: [id], onDelete: Cascade)
  filePath         String
  statements       Float
  branches         Float
  functions        Float
  lines            Float
}

model FileSet {
  id           String     @id @default(uuid())
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
  branch       String
  commit       String
  lastUpdated  DateTime   @default(now())
  files        File[]

  @@unique([repositoryId, branch]) // Ensure only one fileset per repository-branch combination
}

model File {
  id        String  @id @default(uuid())
  fileSet   FileSet @relation(fields: [fileSetId], references: [id], onDelete: Cascade)
  fileSetId String
  path      String
  extension String

  @@unique([fileSetId, path]) // Ensure file paths are unique within a file set
  @@index([fileSetId])
}
